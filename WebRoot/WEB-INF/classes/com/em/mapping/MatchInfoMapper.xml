<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.em.dao.MatchInfoMapper">
  <resultMap id="BaseResultMap" type="com.em.model.MatchInfo">
    <id column="id" jdbcType="INTEGER" property="id" />
        <result column="require_id" property="requireId" jdbcType="INTEGER" />
  <result column="request_id" property="requestId" jdbcType="INTEGER" />
  <result column="teacher_id" property="teacherId" jdbcType="INTEGER" />
  <result column="class_id" property="classId" jdbcType="INTEGER" />
  <result column="manage_id" property="manageId" jdbcType="INTEGER" />
  <result column="semester_id" property="semesterId" jdbcType="INTEGER" />
  <result column="create_time" property="createTime" jdbcType="VARCHAR" />

  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
     id,require_id,request_id,teacher_id,class_id,manage_id,semester_id,create_time
  </sql>
  <select id="selectByExample" parameterType="com.em.model.MatchInfoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from match_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="startRow >= 0 and pageRows > 0">
      limit ${startRow},${pageRows}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
     from match_info
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
   delete from match_info
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.em.model.MatchInfoExample">
    delete from match_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.em.model.MatchInfo">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
      insert into match_info (require_id,request_id,teacher_id,class_id,manage_id,semester_id,create_time)
      values (	#{id,jdbcType=INTEGER},	#{requireId,jdbcType=INTEGER},	#{requestId,jdbcType=INTEGER},	#{teacherId,jdbcType=INTEGER},	#{classId,jdbcType=INTEGER},	#{manageId,jdbcType=INTEGER},	#{semesterId,jdbcType=INTEGER},	#{createTime,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.em.model.MatchInfo">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into match_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null" >
	  id,
 </if>
<if test="requireId != null" >
	  require_id,
 </if>
<if test="requestId != null" >
	  request_id,
 </if>
<if test="teacherId != null" >
	  teacher_id,
 </if>
<if test="classId != null" >
	  class_id,
 </if>
<if test="manageId != null" >
	  manage_id,
 </if>
<if test="semesterId != null" >
	  semester_id,
 </if>
<if test="createTime != null" >
	  create_time
 </if>

    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
         <if test="id != null" >
	 #{id,jdbcType=INTEGER},
	 </if>
  <if test="requireId != null" >
	 #{requireId,jdbcType=INTEGER},
	 </if>
  <if test="requestId != null" >
	 #{requestId,jdbcType=INTEGER},
	 </if>
  <if test="teacherId != null" >
	 #{teacherId,jdbcType=INTEGER},
	 </if>
  <if test="classId != null" >
	 #{classId,jdbcType=INTEGER},
	 </if>
  <if test="manageId != null" >
	 #{manageId,jdbcType=INTEGER},
	 </if>
  <if test="semesterId != null" >
	 #{semesterId,jdbcType=INTEGER},
	 </if>
  <if test="createTime != null" >
	 #{createTime,jdbcType=VARCHAR},
	 </if>

    </trim>
  </insert>
  <select id="countByExample" parameterType="com.em.model.MatchInfoExample" resultType="java.lang.Long">
    select count(*) from match_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update match_info
    <set>
       <if test="record.id != null" >
	 id = #{record.id,jdbcType=INTEGER},
</if>
 <if test="record.requireId != null" >
	 require_id = #{record.requireId,jdbcType=INTEGER},
</if>
 <if test="record.requestId != null" >
	 request_id = #{record.requestId,jdbcType=INTEGER},
</if>
 <if test="record.teacherId != null" >
	 teacher_id = #{record.teacherId,jdbcType=INTEGER},
</if>
 <if test="record.classId != null" >
	 class_id = #{record.classId,jdbcType=INTEGER},
</if>
 <if test="record.manageId != null" >
	 manage_id = #{record.manageId,jdbcType=INTEGER},
</if>
 <if test="record.semesterId != null" >
	 semester_id = #{record.semesterId,jdbcType=INTEGER},
</if>
 <if test="record.createTime != null" >
	 create_time = #{record.createTime,jdbcType=VARCHAR}
</if>

    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update match_info
    set 
    				id = #{record.id,jdbcType=INTEGER},	require_id = #{record.requireId,jdbcType=INTEGER},	request_id = #{record.requestId,jdbcType=INTEGER},	teacher_id = #{record.teacherId,jdbcType=INTEGER},	class_id = #{record.classId,jdbcType=INTEGER},	manage_id = #{record.manageId,jdbcType=INTEGER},	semester_id = #{record.semesterId,jdbcType=INTEGER},	create_time = #{record.createTime,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.em.model.MatchInfo">
    update match_info
    <set>
       <if test="id != null" >
	 id = #{id,jdbcType=INTEGER},
</if>
 <if test="requireId != null" >
	 require_id = #{requireId,jdbcType=INTEGER},
</if>
 <if test="requestId != null" >
	 request_id = #{requestId,jdbcType=INTEGER},
</if>
 <if test="teacherId != null" >
	 teacher_id = #{teacherId,jdbcType=INTEGER},
</if>
 <if test="classId != null" >
	 class_id = #{classId,jdbcType=INTEGER},
</if>
 <if test="manageId != null" >
	 manage_id = #{manageId,jdbcType=INTEGER},
</if>
 <if test="semesterId != null" >
	 semester_id = #{semesterId,jdbcType=INTEGER},
</if>
 <if test="createTime != null" >
	 create_time = #{createTime,jdbcType=VARCHAR}
</if>

    </set>
     where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.em.model.MatchInfo">
    update match_info
    set 
     			id = #{id,jdbcType=INTEGER},	require_id = #{requireId,jdbcType=INTEGER},	request_id = #{requestId,jdbcType=INTEGER},	teacher_id = #{teacherId,jdbcType=INTEGER},	class_id = #{classId,jdbcType=INTEGER},	manage_id = #{manageId,jdbcType=INTEGER},	semester_id = #{semesterId,jdbcType=INTEGER},	create_time = #{createTime,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>
